{"code":"// gets the scroll distance for the given axis\r\nexport function getScroll(w, isTop) {\r\n    let value = w[`page${isTop ? 'Y' : 'X'}Offset`];\r\n    const method = `scroll${isTop ? 'Top' : 'Left'}`;\r\n    if (typeof value !== 'number') {\r\n        const d = w.document;\r\n        value = d.documentElement[method];\r\n        if (typeof value !== 'number') {\r\n            value = d.body[method];\r\n        }\r\n    }\r\n    return value;\r\n}\r\n// gets the total left scroll distance\r\nfunction getScrollLeft(w) {\r\n    return getScroll(w, false);\r\n}\r\n// gets the total top scroll distance\r\nfunction getScrollTop(w) {\r\n    return getScroll(w, true);\r\n}\r\n// returns the window object for the given element\r\nfunction getWindow(element) {\r\n    const doc = element.ownerDocument;\r\n    if (doc) {\r\n        return doc.defaultView;\r\n    }\r\n}\r\n// gets the the region of the element in space by taking into account the current scroll position\r\nexport function getRegion(element) {\r\n    let x;\r\n    let y;\r\n    const doc = element.ownerDocument;\r\n    const body = doc && doc.body;\r\n    const docElem = doc && doc.documentElement;\r\n    const win = getWindow(element);\r\n    const box = element.getBoundingClientRect();\r\n    x = box.left;\r\n    y = box.top;\r\n    x -= (docElem && docElem.clientLeft) || (body && body.clientLeft) || 0;\r\n    y -= (docElem && docElem.clientTop) || (body && body.clientTop) || 0;\r\n    x += getScrollLeft(win);\r\n    y += getScrollTop(win);\r\n    return {\r\n        left: Number(x.toFixed(0)),\r\n        top: Number(y.toFixed(0)),\r\n        height: box.height,\r\n        width: box.width\r\n    };\r\n}\r\n// gets the anchor from the anchor\r\n/*\r\n          tc\r\ntl  *-----*-----*  tr\r\n    |     cc    |\r\ncl  *-----*-----*  cr\r\n    |           |\r\nbl  *-----*-----*  br\r\n          bc\r\n*/\r\nexport function getPoint(anchorPoint, anchorRegion) {\r\n    const verticalPoint = anchorPoint.charAt(0);\r\n    const horizontalPoint = anchorPoint.charAt(1);\r\n    const regionHeight = anchorRegion.height;\r\n    const regionWidth = anchorRegion.width;\r\n    let x = anchorRegion.left;\r\n    let y = anchorRegion.top;\r\n    if (verticalPoint === 'c') {\r\n        y += regionHeight / 2;\r\n    }\r\n    else if (verticalPoint === 'b') {\r\n        y += regionHeight;\r\n    }\r\n    if (horizontalPoint === 'c') {\r\n        x += regionWidth / 2;\r\n    }\r\n    else if (horizontalPoint === 'r') {\r\n        x += regionWidth;\r\n    }\r\n    return {\r\n        top: Number(y.toFixed(0)),\r\n        left: Number(x.toFixed(0))\r\n    };\r\n}\r\n// position of the floater relative to the anchor point\r\nexport function getFloaterPosition(anchorRegion, floaterRegion, anchorPoint, floaterPoint, isRelative) {\r\n    // total diff\r\n    const xdi = anchorPoint.left - floaterPoint.left;\r\n    const ydi = anchorPoint.top - floaterPoint.top;\r\n    // viewport diff\r\n    const xv = xdi + floaterRegion.left - (isRelative ? anchorRegion.left : 0);\r\n    const yv = ydi + floaterRegion.top - (isRelative ? anchorRegion.top : 0);\r\n    return {\r\n        top: yv,\r\n        left: xv\r\n    };\r\n}\r\nexport function calculateRelativePosition(anchorElement, floaterElement, position, isRelative) {\r\n    // current position of the anchor\r\n    const anchorRegion = getRegion(anchorElement);\r\n    const floaterRegion = getRegion(floaterElement);\r\n    // get anchor point to attach floater to\r\n    const anchorPoint = getPoint(position[0], anchorRegion);\r\n    // get floater point to attach to anchor\r\n    const floaterPoint = getPoint(position[1], floaterRegion);\r\n    return getFloaterPosition(anchorRegion, floaterRegion, anchorPoint, floaterPoint, isRelative);\r\n}\r\nexport const getRelativePosition = (anchorElement, floaterElement, position, container) => {\r\n    if (container) {\r\n        const win = getWindow(container);\r\n        const style = win && win.getComputedStyle(container);\r\n        if (style && style.position === 'relative') {\r\n            return calculateRelativePosition(anchorElement, floaterElement, position, true);\r\n        }\r\n    }\r\n    return calculateRelativePosition(anchorElement, floaterElement, position, false);\r\n};\r\n","references":[]}
