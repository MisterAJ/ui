{"code":"import * as React from 'react';\r\nimport { AnimatePresence, } from 'framer-motion';\r\nimport { Portal } from \"..\";\r\nimport { ModalRoot, ModalMask, ModalContainer, ModalWrapper, ModalSentinel } from \"./StyledModal\";\r\nimport { Header } from './Header';\r\nimport { Content } from './Content';\r\nimport { DefaultFooter, Footer } from './Footer';\r\nimport { useTheme } from \"../../hooks\";\r\nvar KEY_CODES;\r\n(function (KEY_CODES) {\r\n    KEY_CODES[KEY_CODES[\"ESC\"] = 27] = \"ESC\";\r\n    KEY_CODES[KEY_CODES[\"TAB\"] = 9] = \"TAB\";\r\n    KEY_CODES[KEY_CODES[\"ENTER\"] = 13] = \"ENTER\";\r\n})(KEY_CODES || (KEY_CODES = {}));\r\nexport const Modal = ({ allowKeyboard, children, cancelButtonProps, cancelButtonText, closable, closeIcon, title, footer, okButtonProps, okButtonText, onOk, onCancel, visible }) => {\r\n    const previousActiveElement = React.useRef(null);\r\n    const modalWrapper = React.useRef(null);\r\n    const modalSentinelStart = React.useRef(null);\r\n    const modalSentinelEnd = React.useRef(null);\r\n    const theme = useTheme();\r\n    const checkFocus = React.useCallback(() => {\r\n        if (modalWrapper.current == null || modalSentinelStart.current == null || !visible) {\r\n            return;\r\n        }\r\n        if (!modalWrapper.current.contains(document.activeElement)) {\r\n            modalSentinelStart.current.focus();\r\n        }\r\n    }, [modalSentinelStart, modalWrapper, visible]);\r\n    // handle the ok click\r\n    const handleOk = React.useCallback(() => {\r\n        if (onOk) {\r\n            onOk();\r\n        }\r\n    }, [onOk]);\r\n    // handle closing the modal and calling onCancel\r\n    const handleClose = React.useCallback(() => {\r\n        if (onCancel) {\r\n            onCancel();\r\n        }\r\n    }, [onCancel]);\r\n    // handle keydown events for accessibility behaviours\r\n    const handleKeyDown = React.useCallback((e) => {\r\n        const activeElement = document.activeElement;\r\n        if (!(modalSentinelEnd.current && modalSentinelStart.current)) {\r\n            return;\r\n        }\r\n        switch (e.keyCode) {\r\n            case KEY_CODES.ESC: {\r\n                if (allowKeyboard) {\r\n                    handleClose();\r\n                }\r\n                break;\r\n            }\r\n            case KEY_CODES.TAB: {\r\n                if (e.shiftKey) {\r\n                    if (activeElement === modalSentinelStart.current) {\r\n                        modalSentinelEnd.current.focus();\r\n                        break;\r\n                    }\r\n                }\r\n                else if (activeElement === modalSentinelEnd.current) {\r\n                    modalSentinelStart.current.focus();\r\n                    break;\r\n                }\r\n                break;\r\n            }\r\n            case KEY_CODES.ENTER: {\r\n                if (allowKeyboard) {\r\n                    handleOk();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }, [handleOk, handleClose, modalSentinelStart, modalSentinelEnd, allowKeyboard]);\r\n    // In order to support clicking the mask to close we need to stop click events on\r\n    // the modal container from bubbling up.\r\n    const handleWrapClick = React.useCallback((e) => {\r\n        e.stopPropagation();\r\n    }, []);\r\n    // store which element was active before the modal opens\r\n    React.useEffect(() => {\r\n        previousActiveElement.current = document.activeElement;\r\n        return () => previousActiveElement.current.focus();\r\n    }, []);\r\n    // Want to check focus when the component updates to make sure it\r\n    // is in the right spot\r\n    React.useEffect(checkFocus);\r\n    React.useEffect(() => {\r\n        if (visible) {\r\n            document.body.style.overflow = 'hidden';\r\n        }\r\n        else {\r\n            document.body.style.overflow = '';\r\n        }\r\n    }, [visible]);\r\n    return (React.createElement(Portal, null,\r\n        React.createElement(AnimatePresence, null, visible &&\r\n            React.createElement(ModalRoot, { className: 'rtk-modal-root', exit: { opacity: 0 }, onKeyDown: handleKeyDown, transition: { duration: theme.animationTimeVeryFast } },\r\n                React.createElement(ModalMask, { className: 'rtk-modal-mask', key: \"mask\", theme: theme, initial: { opacity: 0 }, animate: { opacity: 1 }, transition: { duration: theme.animationTimeVeryFast } }),\r\n                React.createElement(ModalWrapper, { className: 'rtk-modal-wrapper', role: \"document\", tabIndex: -1, onKeyDown: handleKeyDown, ref: modalWrapper, onClick: handleClose },\r\n                    React.createElement(ModalContainer, { className: 'rtk-modal', role: \"dialog\", initial: { y: 24, opacity: 0 }, animate: { y: 0, opacity: 1 }, transition: { duration: theme.animationTimeVeryFast }, onClick: handleWrapClick },\r\n                        React.createElement(ModalSentinel, { ref: modalSentinelStart, tabIndex: 0, \"aria-hidden\": \"true\" }),\r\n                        React.createElement(Header, { closable: closable, closeIcon: closeIcon, onCancel: handleClose, theme: theme }, title),\r\n                        React.createElement(Content, { theme: theme }, children),\r\n                        React.createElement(Footer, null, footer ?\r\n                            footer :\r\n                            React.createElement(DefaultFooter, { cancelButtonProps: cancelButtonProps, cancelButtonText: cancelButtonText, okButtonProps: okButtonProps, okButtonText: okButtonText, onCancel: handleClose, onOk: handleOk })),\r\n                        React.createElement(ModalSentinel, { ref: modalSentinelEnd, tabIndex: 0, \"aria-hidden\": \"true\" })))))));\r\n};\r\nModal.defaultProps = {\r\n    allowKeyboard: true,\r\n    visible: false,\r\n    okButtonProps: {\r\n        type: 'primary'\r\n    },\r\n    cancelButtonProps: {\r\n        ghost: true\r\n    }\r\n};\r\n","references":["/Users/adam.aho/wolf/ui/node_modules/@types/react/index.d.ts","/Users/adam.aho/wolf/ui/node_modules/framer-motion/dist/framer-motion.d.ts","/Users/adam.aho/wolf/ui/src/components/index.ts","/Users/adam.aho/wolf/ui/src/components/modal/StyledModal.tsx","/Users/adam.aho/wolf/ui/src/components/modal/Header.tsx","/Users/adam.aho/wolf/ui/src/components/modal/Content.tsx","/Users/adam.aho/wolf/ui/src/components/modal/Footer.tsx","/Users/adam.aho/wolf/ui/src/hooks/index.ts","/Users/adam.aho/wolf/ui/src/components/index.ts"]}
